knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(janitor)
library(kableExtra)
rm(list = ls())
`%notin%` = function(x,y) !(x %in% y)
source("funciones/calculaECM.R")
gobernador2015<- read_excel("data/ComputoGobernador2015_Casilla.xlsx",
sheet = "POR CASILLA", skip = 1) %>%
clean_names()
UbicacionCasillas2015 <- read_excel("data/UbicacionCasillas2015.xlsx", skip = 4) %>%
clean_names()
gobernador2015 <- UbicacionCasillas2015 %>%
left_join(gobernador2015, ., by = c("seccion", "casilla")) %>%
select(-c(distrito_local.y, municipio.y, domicilio)) %>%
mutate(seccion_casilla = paste(seccion, casilla)) %>%
rename(municipio = municipio.x,
distrito_local = distrito_local.x)
gobernador2015 %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida),
PRD = sum(prd) / sum(votacion_total_emitida)) -> Global
# Resultado global
Global <- Global * 100
Global
total.casillas <- length(gobernador2015$seccion_casilla)
N <- 370          # Número de secciones
M <- 10000        # Número de repeticiones
# Crea una matriz vacía
simulacionMAS <- matrix(rep(0, length(Global)*M), nrow = M)
colnames(simulacionMAS) <- c("PRI", "PAN", "PRD")
t <- proc.time() # calcula tiempo: inicio
for(i in 1:M){
muestra <- sample(gobernador2015$seccion_casilla, N)
gobernador2015 %>%
filter(seccion_casilla %in% muestra) %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida),
PRD = sum(prd) / sum(votacion_total_emitida)) %>%
as.numeric() -> simulacionMAS[i, ]
}
total.casillas <- length(gobernador2015$seccion_casilla)
N <- 370          # Número de secciones
M <- 1000        # Número de repeticiones
# Crea una matriz vacía
simulacionMAS <- matrix(rep(0, length(Global)*M), nrow = M)
colnames(simulacionMAS) <- c("PRI", "PAN", "PRD")
t <- proc.time() # calcula tiempo: inicio
for(i in 1:M){
muestra <- sample(gobernador2015$seccion_casilla, N)
gobernador2015 %>%
filter(seccion_casilla %in% muestra) %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida),
PRD = sum(prd) / sum(votacion_total_emitida)) %>%
as.numeric() -> simulacionMAS[i, ]
}
proc.time()-t  # calcula tiempo: final
# Se convierte a data frame, se multiplica por 100 y se calcula error
simulacionMAS <- data.frame(simulacionMAS * 100) %>%
mutate(dif.PRI = PRI - Global$PRI,
dif.PAN = PAN - Global$PAN,
dif.PRD = PRD - Global$PRD)
# Se calcula k, la posición de la casilla inicial se elige al azar entre 1 y k
k <- round(total.casillas/N,0)
# Selección de posición de casilla inicial
casilla0 <- sample(1:k, 1)
# Seleccion de posición del resto de casillas
posicion <- c()
for(i in 1: N-1) {
posicion <- c(posicion, casilla0 + i*k)
}
#length(seleccion.casillas)
# Crea una matriz vacía
simulacionSIST <- matrix(rep(0, length(Global)*M), nrow = M)
colnames(simulacionSIST) <- c("PRI", "PAN", "PRD")
t <- proc.time() # calcula tiempo: inicio
for(i in 1:M){
muestra <- gobernador2015$seccion_casilla[posicion]
gobernador2015 %>%
filter(seccion_casilla %in% muestra) %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida),
PRD = sum(prd) / sum(votacion_total_emitida)) %>%
as.numeric() -> simulacionSIST[i, ]
}
proc.time()-t  # calcula tiempo: final
# Se convierte a data frame, se multiplica por 100 y se calcula error
simulacionSIST <- data.frame(simulacionSIST * 100) %>%
mutate(dif.PRI = PRI - Global$PRI,
dif.PAN = PAN - Global$PAN,
dif.PRD = PRD - Global$PRD)
distritos <- unique(gobernador2015$distrito_local)
num.distritos <- length(distritos)
casillas.xDistrito <- round(N / num.distritos)
casillas.xDistrito * num.distritos
# Crea una matriz vacía
simulacionESTR.simple <- matrix(rep(0, length(Global)*M), nrow = M)
colnames(simulacionESTR.simple) <- c("PRI", "PAN", "PRD")
t <- proc.time() # calcula tiempo: inicio
for(i in 1:M){
# selección de una muestra
muestra <- c()
for(j in 1: num.distritos){
gobernador2015 %>%
filter(distrito_local == distritos[j]) %>%
select(seccion_casilla) -> df.distrito
muestra <- c(muestra, sample(df.distrito$seccion_casilla, casillas.xDistrito))
}
gobernador2015 %>%
filter(seccion_casilla %in% muestra) %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida),
PRD = sum(prd) / sum(votacion_total_emitida)) %>%
as.numeric() -> simulacionESTR.simple[i, ]
}
proc.time()-t  # calcula tiempo: final
# Se convierte a data frame, se multiplica por 100 y se calcula error
simulacionESTR.simple <- data.frame(simulacionESTR.simple * 100) %>%
mutate(dif.PRI = PRI - Global$PRI,
dif.PAN = PAN - Global$PAN,
dif.PRD = PRD - Global$PRD)
df.distritos <- gobernador2015 %>%
group_by(distrito_local) %>%
summarise(LN = sum(lista_nominal),
n = n(),
p = LN/sum(gobernador2015$lista_nominal)) %>%
mutate(casillas.n = round(num.casillas = N * p)) %>%
arrange(LN)
options(scipen=999)
resumen <- data.frame()
resumen <- resumen %>%
rbind(calculaECM(simulacionMAS)) %>%
rbind(calculaECM(simulacionSIST)) %>%
rbind(calculaECM(simulacionESTR.simple))
row.names(resumen) = c("MAS", "Sistemático", "Estr simple")
resumen
# Se calcula k, la posición de la casilla inicial se elige al azar entre 1 y k
k <- round(total.casillas/N,0)
# Selección de posición de casilla inicial
casilla0 <- sample(1:k, 1)
# Seleccion de posición del resto de casillas
posicion <- c()
for(i in 1: N-1) {
posicion <- c(posicion, casilla0 + i*k)
}
#length(seleccion.casillas)
# Crea una matriz vacía
simulacionSIST <- matrix(rep(0, length(Global)*M), nrow = M)
colnames(simulacionSIST) <- c("PRI", "PAN", "PRD")
t <- proc.time() # calcula tiempo: inicio
for(i in 1:M){
muestra <- gobernador2015$seccion_casilla[posicion]
gobernador2015 %>%
filter(seccion_casilla %in% muestra) %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida),
PRD = sum(prd) / sum(votacion_total_emitida)) %>%
as.numeric() -> simulacionSIST[i, ]
}
proc.time()-t  # calcula tiempo: final
# Se convierte a data frame, se multiplica por 100 y se calcula error
simulacionSIST <- data.frame(simulacionSIST * 100) %>%
mutate(dif.PRI = PRI - Global$PRI,
dif.PAN = PAN - Global$PAN,
dif.PRD = PRD - Global$PRD)
df.distritos <- gobernador2015 %>%
group_by(distrito_local) %>%
summarise(LN = sum(lista_nominal),
n = n(),
p = LN/sum(gobernador2015$lista_nominal)) %>%
mutate(casillas.n = round(num.casillas = N * p)) %>%
arrange(LN)
options(scipen=999)
resumen <- data.frame()
resumen <- resumen %>%
rbind(calculaECM(simulacionMAS)) %>%
rbind(calculaECM(simulacionSIST)) %>%
rbind(calculaECM(simulacionESTR.simple))
row.names(resumen) = c("MAS", "Sistemático", "Estr simple")
resumen
k
casilla0
posicion
simulacionSIST
# Se calcula k, la posición de la casilla inicial se elige al azar entre 1 y k
k <- round(total.casillas/N,0)
# Crea una matriz vacía
simulacionSIST <- matrix(rep(0, length(Global)*M), nrow = M)
colnames(simulacionSIST) <- c("PRI", "PAN", "PRD")
t <- proc.time() # calcula tiempo: inicio
for(i in 1:M){
# Selección de posición de casilla inicial
casilla0 <- sample(1:k, 1)
# Seleccion de posición del resto de casillas
posicion <- c()
for(j in 1: N-1) {
posicion <- c(posicion, casilla0 + j*k)
}
muestra <- gobernador2015$seccion_casilla[posicion]
gobernador2015 %>%
filter(seccion_casilla %in% muestra) %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida),
PRD = sum(prd) / sum(votacion_total_emitida)) %>%
as.numeric() -> simulacionSIST[i, ]
}
proc.time()-t  # calcula tiempo: final
# Se convierte a data frame, se multiplica por 100 y se calcula error
simulacionSIST <- data.frame(simulacionSIST * 100) %>%
mutate(dif.PRI = PRI - Global$PRI,
dif.PAN = PAN - Global$PAN,
dif.PRD = PRD - Global$PRD)
# Se calcula k, la posición de la casilla inicial se elige al azar entre 1 y k
k <- round(total.casillas/N,0)
# Crea una matriz vacía
simulacionSIST <- matrix(rep(0, length(Global)*M), nrow = M)
colnames(simulacionSIST) <- c("PRI", "PAN", "PRD")
t <- proc.time() # calcula tiempo: inicio
for(i in 1:M){
# Selección de posición de casilla inicial
casilla0 <- sample(1:k, 1)
# Seleccion de posición del resto de casillas
posicion <- c()
for(j in 1: N-1) {
posicion <- c(posicion, casilla0 + j*k)
}
muestra <- gobernador2015$seccion_casilla[posicion]
gobernador2015 %>%
filter(seccion_casilla %in% muestra) %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida),
PRD = sum(prd) / sum(votacion_total_emitida)) %>%
as.numeric() -> simulacionSIST[i, ]
}
proc.time()-t  # calcula tiempo: final
# Se convierte a data frame, se multiplica por 100 y se calcula error
simulacionSIST <- data.frame(simulacionSIST * 100) %>%
mutate(dif.PRI = PRI - Global$PRI,
dif.PAN = PAN - Global$PAN,
dif.PRD = PRD - Global$PRD)
options(scipen=999)
resumen <- data.frame()
resumen <- resumen %>%
rbind(calculaECM(simulacionMAS)) %>%
rbind(calculaECM(simulacionSIST)) %>%
rbind(calculaECM(simulacionESTR.simple))
row.names(resumen) = c("MAS", "Sistemático", "Estr simple")
resumen
summary(simulacionSIST[4:6])
