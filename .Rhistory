fig
fig %>%
add_trace(y = ~maxPRI, name = 'PRI', type = "scatter", mode = "lines",
line = list(color = 'transparent'))
fig <- plot_ly(data = data[which(data$supp == 'OJ'),],
x = ~cortes, y = ~length, type = 'bar', name = 'OJ',
error_y = ~list(array = sd,
color = '#000000'))
fig
fig <- plot_ly(data =,
x = ~cortes, y = ~length, type = 'bar', name = 'OJ',
error_y = ~list(array = sd,
color = '#000000'))
fig <- plot_ly(data =,
x = ~cortes, y = ~estPRI, type = 'bar', name = 'OJ',
error_y = ~list(array = deltaPRI,
color = '#000000'))
fig
fig <- plot_ly(data =,
x = ~cortes, y = ~estPRI, type = 'bar', name = 'OJ',
error_y = ~list(array = deltaPRI,
color = '#000000'))
fig
fig <- plot_ly(data,
x = ~cortes, y = ~estPRI, type = 'bar', name = 'OJ',
error_y = ~list(array = deltaPRI,
color = '#000000'))
fig
fig <- plot_ly(data,
x = ~cortes, y = ~estPRI, type = 'fig', name = 'OJ',
error_y = ~list(array = deltaPRI,
color = '#000000'))
fig
fig <- plot_ly(data,
x = ~cortes, y = ~estPRI, type = 'fig', name = 'OJ',
error_y = ~list(array = deltaPRI,
color = '#000000'))
fig
data <- resumen %>%
mutate(minPRI = estPRI - deltaPRI,
maxPRI = estPRI + deltaPRI,
minPAN = estPAN - deltaPAN,
maxPAN = estPAN + deltaPAN)
fig <- plot_ly(data,
x = ~cortes, y = ~estPRI, type = 'fig', name = 'OJ',
error_y = ~list(array = deltaPRI,
color = '#000000'))
fig
fig <- plot_ly(data,
x = ~cortes, y = ~estPRI, type = 'scatter', name = 'OJ',
error_y = ~list(array = deltaPRI,
color = '#000000'))
fig
data
fig <- plot_ly(data,
x = ~cortes, y = ~estPRI, type = 'scatter', name = 'PRI',
error_y = ~list(array = deltaPRI,
color = '#000000'))
fig
fig <- plot_ly(data,
x = ~cortes, y = ~c(estPRI, esPAN),
type = 'scatter', name = 'PRI',
error_y = c(deltaPRI, deltaPAN))
fig <- plot_ly(data,
x = ~cortes, y = c(~estPRI, ~estPAN),
type = 'scatter', name = 'PRI',
error_y = c(~deltaPRI, ~deltaPAN))
fig
fig <- plot_ly(data, x = cortes)
fig <- fig %>%
add_trace(y = ~maxPRI, name = 'PRI', type = "scatter", mode = "lines",
line = list(color = 'transparent')) %>%
add_trace(y = ~minPRI, name = 'PRI', type = "scatter", mode = "lines",
line = list(color = 'transparent'), fill = 'tonexty',
fillcolor='rgba(100,0,0,0.2)') %>%
add_trace(y = ~estPRI, name = 'PRI', mode = "lines",
line = list(color = 'red'))  %>%
add_trace(y = ~maxPAN, name = 'PAN', type = "scatter", mode = "lines",
line = list(color = 'transparent')) %>%
add_trace(y = ~minPAN, name = 'PAN', type = "scatter", mode = "lines",
line = list(color = 'transparent'), fill = 'tonexty',
fillcolor='rgba(0,0,100,0.2)') %>%
add_trace(y = ~estPAN, name = 'PAN', mode = "lines",
line = list(color = 'blue'))
fig
fig <- plot_ly(data, x = cortes)
fig <- fig %>%
add_trace(y = ~maxPRI, name = 'PRI', type = "scatter", mode = "lines",
line = list(color = 'transparent'))
fig
fig <- plot_ly(data,
x = ~cortes, y = c(~estPRI, ~estPAN),
type = 'scatter', name = 'PRI',
error_y = c(~deltaPRI, ~deltaPAN))
fig
data <- resumen %>%
mutate(minPRI = estPRI - deltaPRI,
maxPRI = estPRI + deltaPRI,
minPAN = estPAN - deltaPAN,
maxPAN = estPAN + deltaPAN)
fig <- plot_ly(data,
x = ~cortes, y = c(~estPRI, ~estPAN),
type = 'scatter', name = 'PRI',
error_y = c(~deltaPRI, ~deltaPAN))
fig
fig <- plot_ly(data,
x = ~cortes, y = ~estPRI, type = 'scatter', name = 'PRI',
error_y = ~list(array = deltaPRI, color = '#000000'))
fig
fig <- plot_ly(data,
x = ~cortes, y = ~estPRI, type = 'scatter', name = 'PRI',
error_y = ~list(array = deltaPRI, color = '#000000')) %>%
add_trace(x = ~cortes, y = ~estPRI, type = 'scatter', name = 'PRI',
error_y = ~list(array = deltaPRI, color = '#000000'))
fig
fig <- plot_ly(data,
x = ~cortes, y = ~estPRI, type = 'scatter', name = 'PRI',
error_y = ~list(array = deltaPRI, color = '#000000')) %>%
add_trace(x = ~cortes, y = ~estPAN, type = 'scatter', name = 'PRI',
error_y = ~list(array = deltaPAN, color = '#000000'))
fig
data <- resumen
fig <- plot_ly(data,
x = ~cortes, y = ~estPRI, type = 'scatter', name = 'PRI',
error_y = ~list(array = deltaPRI, color = '#000000')) %>%
add_trace(x = ~cortes, y = ~estPAN, type = 'scatter', name = 'PRI',
error_y = ~list(array = deltaPAN, color = '#000000'))
fig
data <- resumen
fig <- plot_ly(data,
x = ~cortes, y = ~estPRI, type = 'scatter', name = 'PRI',
error_y = ~list(array = deltaPRI, color = '#000000')) %>%
add_trace(x = ~cortes, y = ~estPAN, type = 'scatter', name = 'PAN',
error_y = ~list(array = deltaPAN, color = '#000000'))
fig
cortes <- c("2021-06-06 19:00:00", "2021-06-06 20:00:00",
"2021-06-06 21:00:00", "2021-06-06 22:00:00",
"2021-06-06 23:00:00")
df <- gobernador2015 %>%
rename(estrato = distrito_tipo)
avance <- c()
resumen <- data.frame()
for(i in 1: length(cortes)){
df.muestra0 <- muestra.fija %>%
filter(hora <= cortes[i]) %>%
select(casilla)
muestra0 <- df.muestra0$casilla
df0 <- df %>%
filter(seccion_casilla %in% muestra0)
resumen <- simEstratificadoMuestraFija(df0, df.distritosTipo, muestra0) %>%
rbind(resumen)
avance[i] = length(muestra0)/n
}
resumen <- cbind(cortes, resumen, avance) %>%
select(-c(varPAN, varPRI))
data <- resumen
fig <- plot_ly(data,
x = ~cortes, y = ~estPRI, type = 'scatter', name = 'PRI',
error_y = ~list(array = deltaPRI, color = '#000000')) %>%
add_trace(x = ~cortes, y = ~estPAN, type = 'scatter', name = 'PAN',
error_y = ~list(array = deltaPAN, color = '#000000'))
fig
df.muestra0 <- muestra.fija %>%
select(casilla)
muestra0 <- df.muestra0$casilla
df0 <- df %>%
filter(seccion_casilla %in% muestra0)
resumen <- simEstratificadoMuestraFija(
df0, df.distritosTipo, muestra0) %>%
rbind(resumen)
simEstratificadoMuestraFija(df0, df.distritosTipo, muestra0) %>%
rbind(resumen)
simEstratificadoMuestraFija(df0, df.distritosTipo, muestra0)
length(muestra0)/n
length(muestra0)
simEstratificadoMuestraFija(df0, df.distritosTipo, muestra0)
resumen
cortes <- c("2021-06-06 19:00:00", "2021-06-06 20:00:00",
"2021-06-06 21:00:00", "2021-06-06 22:00:00",
"2021-06-06 23:00:00", "2021-06-07 00:00:00")
df <- gobernador2015 %>%
rename(estrato = distrito_tipo)
avance <- c()
resumen <- data.frame()
for(i in 1: length(cortes)){
df.muestra0 <- muestra.fija %>%
filter(hora <= cortes[i]) %>%
select(casilla)
muestra0 <- df.muestra0$casilla
df0 <- df %>%
filter(seccion_casilla %in% muestra0)
resumen <- simEstratificadoMuestraFija(
df0, df.distritosTipo, muestra0) %>%
rbind(resumen)
avance[i] = length(muestra0)/n
}
resumen <- cbind(cortes, resumen, avance) %>%
select(-c(varPAN, varPRI))
resumen
df.muestra0 <- muestra.fija %>%
select(casilla)
muestra0 <- df.muestra0$casilla
df0 <- df %>%
filter(seccion_casilla %in% muestra0)
simEstratificadoMuestraFija(df0, df.distritosTipo, muestra0)
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(readxl)
library(dplyr)
library(janitor)
library(magrittr)
library(plotly)
rm(list = ls())
`%notin%` = function(x,y) !(x %in% y)
source("funciones/muestra.R")
source("funciones/simEstratificadoMuestraFija.R")
source("funciones/lecturaDatos.R")
gobernador2015 <- lecturaDatos()
gobernador2015 %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida)) %>%
select(PRI, PAN) -> resultadoReal
resultadoReal
N <- length(gobernador2015$seccion_casilla)  # total de casillas
n <- muestra(N)                              # Número de secciones en la muestra
z <- 2.575
#z <- qnorm(1-0.01/2)
#z <- 1.96
df.distritosTipo <- gobernador2015 %>%
group_by(distrito_tipo) %>%
summarise(LN = sum(lista_nominal),
Nh = n(),           # Casillas por distrito
p = LN/sum(gobernador2015$lista_nominal)) %>%   # Proporción
mutate(nh = round(n * p),
nh12 = round(N * 0.12 * p),
nh15 = round(N * 0.15 * p),
nh25 = round(N * 0.25 * p)) %>%
mutate(nh = if_else(nh == 1, 2, nh),
nh12 = if_else(nh12 == 1, 2, nh12),
nh15 = if_else(nh15 == 1, 2, nh15),
nh25 = if_else(nh25 == 1, 2, nh25)) %>%
arrange(distrito_tipo) %>%
rename(estrato = distrito_tipo)
rand.date = function(start.time, end.time, size){
times <- seq(from=as.POSIXct(start.time),
to=as.POSIXct(end.time), by="min")
U <- runif(size, 1, length(times))
#weibull.times <- (1/vlambda) *(-log(1-U))^(1/valpha)
date=times[U]
return(date)
}
# Prueba la función
hora.inicio <- "2021-06-06 18:00:00"
hora.final <- "2021-06-07 00:00:00"
rand.date(hora.inicio, hora.final, 2)
muestra.fija <- read.csv("muestra.csv")
hora <- rand.date(hora.inicio, hora.final, length(muestra.fija[,1]))
muestra.fija <- muestra.fija %>%
cbind(hora) %>%
rename(casilla = x) %>%
select(casilla, hora)
cortes <- c("2021-06-06 19:00:00", "2021-06-06 20:00:00",
"2021-06-06 21:00:00", "2021-06-06 22:00:00",
"2021-06-06 23:00:00", "2021-06-07 00:00:00")
df <- gobernador2015 %>%
rename(estrato = distrito_tipo)
avance <- c()
resumen <- data.frame()
for(i in 1: length(cortes)){
df.muestra0 <- muestra.fija %>%
filter(hora <= cortes[i]) %>%
select(casilla)
muestra0 <- df.muestra0$casilla
df0 <- df %>%
filter(seccion_casilla %in% muestra0)
resumen <- simEstratificadoMuestraFija(
df0, df.distritosTipo, muestra0) %>%
rbind(resumen)
rm(muestra0, df0)
avance[i] = length(muestra0)/n
}
for(i in 1: length(cortes)){
df.muestra0 <- muestra.fija %>%
filter(hora <= cortes[i]) %>%
select(casilla)
muestra0 <- df.muestra0$casilla
df0 <- df %>%
filter(seccion_casilla %in% muestra0)
resumen <- simEstratificadoMuestraFija(
df0, df.distritosTipo, muestra0) %>%
rbind(resumen)
avance[i] = length(muestra0)/n
}
resumen <- cbind(cortes, resumen, avance) %>%
select(-c(varPAN, varPRI))
cortes <- c("2021-06-06 19:00:00", "2021-06-06 20:00:00",
"2021-06-06 21:00:00", "2021-06-06 22:00:00",
"2021-06-06 23:00:00", "2021-06-07 00:00:00")
df <- gobernador2015 %>%
rename(estrato = distrito_tipo)
avance <- c()
resumen <- data.frame()
for(i in 1: length(cortes)){
df.muestra0 <- muestra.fija %>%
filter(hora <= cortes[i]) %>%
select(casilla)
muestra0 <- df.muestra0$casilla
df0 <- df %>%
filter(seccion_casilla %in% muestra0)
resumen <- simEstratificadoMuestraFija(
df0, df.distritosTipo, muestra0) %>%
rbind(resumen)
avance[i] = length(muestra0)/n
}
resumen <- cbind(cortes, resumen, avance) %>%
select(-c(varPAN, varPRI))
for(i in 1: length(cortes)){
df.muestra0 <- muestra.fija %>%
filter(hora <= cortes[i]) %>%
select(casilla)
muestra0 <- df.muestra0$casilla
df0 <- df %>%
filter(seccion_casilla %in% muestra0)
resumen <- simEstratificadoMuestraFija(
df0, df.distritosTipo, muestra0) %>%
rbind(resumen)
avance[i] = length(muestra0)/n
}
cortes <- c("2021-06-06 19:00:00", "2021-06-06 20:00:00",
"2021-06-06 21:00:00", "2021-06-06 22:00:00",
"2021-06-06 23:00:00", "2021-06-07 00:00:00")
df <- gobernador2015 %>%
rename(estrato = distrito_tipo)
avance <- c()
resumen <- data.frame()
for(i in 1: length(cortes)){
df.muestra0 <- muestra.fija %>%
filter(hora <= cortes[i]) %>%
select(casilla)
muestra0 <- df.muestra0$casilla
df0 <- df %>%
filter(seccion_casilla %in% muestra0)
resumen <- simEstratificadoMuestraFija(
df0, df.distritosTipo, muestra0) %>%
rbind(resumen)
avance[i] = length(muestra0)/n
}
resumen <- cbind(cortes, resumen, avance) %>%
select(-c(varPAN, varPRI))
resumen
data <- resumen
fig <- plot_ly(data,
x = ~cortes, y = ~estPRI, type = 'scatter', name = 'PRI',
error_y = ~list(array = deltaPRI, color = '#000000')) %>%
add_trace(x = ~cortes, y = ~estPAN, type = 'scatter', name = 'PAN',
error_y = ~list(array = deltaPAN, color = '#000000'))
fig
df.muestra0 <- muestra.fija %>%
select(casilla)
muestra0 <- df.muestra0$casilla
df0 <- df %>%
filter(seccion_casilla %in% muestra0)
simEstratificadoMuestraFija(df0, df.distritosTipo, muestra0)
data <- resumen
fig <- plot_ly(data,
x = ~cortes, y = ~estPRI, type = 'scatter', name = 'PRI',
error_y = ~list(array = deltaPRI, color = '#000000')) %>%
add_trace(x = ~cortes, y = ~estPAN, type = 'scatter', name = 'PAN',
error_y = ~list(array = deltaPAN, color = '#000000'))
fig
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(readxl)
library(dplyr)
library(janitor)
library(magrittr)
library(plotly)
rm(list = ls())
`%notin%` = function(x,y) !(x %in% y)
source("funciones/muestra.R")
source("funciones/simEstratificadoMuestraFija.R")
source("funciones/lecturaDatos.R")
gobernador2015 <- lecturaDatos()
gobernador2015 %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida)) %>%
select(PRI, PAN) -> resultadoReal
resultadoReal
N <- length(gobernador2015$seccion_casilla)  # total de casillas
n <- muestra(N)                              # Número de secciones en la muestra
z <- 2.575
#z <- qnorm(1-0.01/2)
#z <- 1.96
df.distritosTipo <- gobernador2015 %>%
group_by(distrito_tipo) %>%
summarise(LN = sum(lista_nominal),
Nh = n(),           # Casillas por distrito
p = LN/sum(gobernador2015$lista_nominal)) %>%   # Proporción
mutate(nh = round(n * p),
nh12 = round(N * 0.12 * p),
nh15 = round(N * 0.15 * p),
nh25 = round(N * 0.25 * p)) %>%
mutate(nh = if_else(nh == 1, 2, nh),
nh12 = if_else(nh12 == 1, 2, nh12),
nh15 = if_else(nh15 == 1, 2, nh15),
nh25 = if_else(nh25 == 1, 2, nh25)) %>%
arrange(distrito_tipo) %>%
rename(estrato = distrito_tipo)
rand.date = function(start.time, end.time, size){
times <- seq(from=as.POSIXct(start.time),
to=as.POSIXct(end.time), by="min")
U <- runif(size, 1, length(times))
#weibull.times <- (1/vlambda) *(-log(1-U))^(1/valpha)
date=times[U]
return(date)
}
# Prueba la función
hora.inicio <- "2021-06-06 18:00:00"
hora.final <- "2021-06-07 00:00:00"
rand.date(hora.inicio, hora.final, 2)
muestra.fija <- read.csv("muestra.csv")
hora <- rand.date(hora.inicio, hora.final, length(muestra.fija[,1]))
muestra.fija <- muestra.fija %>%
cbind(hora) %>%
rename(casilla = x) %>%
select(casilla, hora)
muestra.fija
muestra.fija <- muestra.fija %>%
cbind(hora) %>%
rename(casilla = x) %>%
select(casilla, hora)
muestra.fija <- read.csv("muestra.csv")
hora <- rand.date(hora.inicio, hora.final, length(muestra.fija[,1]))
muestra.fija <- muestra.fija %>%
cbind(hora) %>%
rename(casilla = x) %>%
select(casilla, hora)
muestra.fija
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(readxl)
library(dplyr)
library(janitor)
library(magrittr)
library(plotly)
rm(list = ls())
`%notin%` = function(x,y) !(x %in% y)
source("funciones/muestra.R")
source("funciones/simEstratificadoMuestraFija.R")
source("funciones/lecturaDatos.R")
gobernador2015 <- lecturaDatos()
gobernador2015 %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida)) %>%
select(PRI, PAN) -> resultadoReal
resultadoReal
N <- length(gobernador2015$seccion_casilla)  # total de casillas
n <- muestra(N)                              # Número de secciones en la muestra
z <- 2.575
#z <- qnorm(1-0.01/2)
#z <- 1.96
df.distritosTipo <- gobernador2015 %>%
group_by(distrito_tipo) %>%
summarise(LN = sum(lista_nominal),
Nh = n(),           # Casillas por distrito
p = LN/sum(gobernador2015$lista_nominal)) %>%   # Proporción
mutate(nh = round(n * p),
nh12 = round(N * 0.12 * p),
nh15 = round(N * 0.15 * p),
nh25 = round(N * 0.25 * p)) %>%
mutate(nh = if_else(nh == 1, 2, nh),
nh12 = if_else(nh12 == 1, 2, nh12),
nh15 = if_else(nh15 == 1, 2, nh15),
nh25 = if_else(nh25 == 1, 2, nh25)) %>%
arrange(distrito_tipo) %>%
rename(estrato = distrito_tipo)
rand.date = function(start.time, end.time, size){
times <- seq(from=as.POSIXct(start.time),
to=as.POSIXct(end.time), by="min")
U <- runif(size, 1, length(times))
#weibull.times <- (1/vlambda) *(-log(1-U))^(1/valpha)
date=times[U]
return(date)
}
# Prueba la función
hora.inicio <- "2021-06-06 18:00:00"
hora.final <- "2021-06-07 00:00:00"
rand.date(hora.inicio, hora.final, 2)
muestra.fija <- read.csv("muestra.csv")
hora <- rand.date(hora.inicio, hora.final, length(muestra.fija[,1]))
muestra.fija <- muestra.fija %>%
cbind(hora) %>%
rename(casilla = x) %>%
select(casilla, hora)
cortes <- c("2021-06-06 19:00:00", "2021-06-06 20:00:00",
"2021-06-06 21:00:00", "2021-06-06 22:00:00",
"2021-06-06 23:00:00", "2021-06-07 00:00:00")
df <- gobernador2015 %>%
rename(estrato = distrito_tipo)
avance <- c()
resumen <- data.frame()
for(i in 1: length(cortes)){
df.muestra0 <- muestra.fija %>%
filter(hora <= cortes[i]) %>%
select(casilla)
muestra0 <- df.muestra0$casilla
df0 <- df %>%
filter(seccion_casilla %in% muestra0)
resumen <- simEstratificadoMuestraFija(
df0, df.distritosTipo, muestra0) %>%
rbind(resumen)
avance[i] = length(muestra0)/length(muestra.fija$casilla)
}
resumen <- cbind(cortes, resumen, avance) %>%
select(-c(varPAN, varPRI))
