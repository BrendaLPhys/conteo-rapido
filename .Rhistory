library(cowplot)
library(magrittr)
library("Cairo")
rm(list = ls())
`%notin%` = function(x,y) !(x %in% y)
source("funciones/muestra.R")
source("funciones/calculaECM.R")
source("funciones/graficaHistograma.R")
source("funciones/graficaError.R")
source("funciones/funcionesSimulacion.R")
source("funciones/funcionesSimulaEstrVar.R")
#, echo = FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(readxl)
library(dplyr)
library(janitor)
library(kableExtra)
library(tidyverse)
library(extrafont)
library(scales)
library(showtext)
library(tint)
library(miniUI)
library(units)
library(ggfortify)
library(cowplot)
library(magrittr)
library("Cairo")
rm(list = ls())
`%notin%` = function(x,y) !(x %in% y)
source("funciones/muestra.R")
source("funciones/calculaECM.R")
source("funciones/graficaHistograma.R")
source("funciones/graficaError.R")
source("funciones/funcionesSimulacion.R")
source("funciones/funcionSimulaEstrVar.R")
gobernador2015<- read_excel("data/ComputoGobernador2015_Casilla.xlsx",
sheet = "POR CASILLA", skip = 1) %>%
clean_names()
UbicacionCasillas2015 <- read_excel("data/UbicacionCasillas2015.xlsx", skip = 4) %>%
clean_names()
casillas_sonora <- read.csv("data/casillas_sonora.csv")  %>%
select(seccion, casilla_tipo) %>%
distinct(seccion, casilla_tipo) %>%
rbind(c(608, "RURAL"))
casillas_sonora$seccion %<>% as.numeric()
gobernador2015 <- UbicacionCasillas2015 %>%
left_join(gobernador2015, ., by = c("seccion", "casilla")) %>%
select(-c(distrito_local.y, municipio.y, domicilio)) %>%
mutate(seccion_casilla = paste(seccion, casilla)) %>%
rename(municipio = municipio.x,
distrito_local = distrito_local.x)
gobernador2015 <- casillas_sonora %>%
left_join(gobernador2015, ., by = "seccion") %>%
mutate(distrito_tipo = paste(distrito_local,casilla_tipo))
rm(casillas_sonora)
gobernador2015 %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida)) -> resultadoReal
# Resultado global
resultadoReal <- resultadoReal * 100
resultadoReal
N <- length(gobernador2015$seccion_casilla)  # total de casillas
n <- muestra(N)                              # Número de secciones en la muestra
M <- 10                                    # Número de repeticiones
df.distritos <- gobernador2015 %>%
group_by(distrito_local) %>%
summarise(LN = sum(lista_nominal),
N.dist = n(),           # Casillas por distrito
p = LN/sum(gobernador2015$lista_nominal)) %>%   # Proporción
mutate(n.dist = round(num.casillas = n * p)) %>%
arrange(distrito_local)
df.distritos
simulacionESTR.prop <- funcionSimulaEstrVar(gobernador2015, n, M, df.distritos)
simulacionESTR.prop <- simulacionESTR.prop %>%
mutate(MinPRI = estPRI - (2.57 * varPRI),
MaxPRI = estPRI + (2.57 * varPRI),
MinPAN = estPAN - (2.57 * varPAN),
MaxPAN = estPAN + (2.57 * varPAN),
capturaPRI = estPRI > MinPRI
&& estPRI < MaxPRI,
capturaPAN = estPAN > MinPAN
&& estPAN < MaxPAN,
no.Traslape = MaxPAN < MinPRI,
longIntPRI = MaxPRI-MinPRI,
longIntPAN = MaxPAN-MinPAN)
captura_verdad <- data.frame()
captura_verdad <- captura_verdad %>%
rbind(simulacionESTR.prop %>%
select(capturaPRI, capturaPAN, no.Traslape) %>%
summarise(PRI.capturado = 100*length(capturaPRI[capturaPRI==TRUE]) / M,
PAN.capturado = 100*length(capturaPAN[capturaPAN==TRUE]) / M,
no.Traslapado = 100*length(no.Traslape[no.Traslape==TRUE])/M))
captura_verdad
titulo <- "Simulación: Muestreo estratificado (proporcional)"
graficaError(simulacionESTR.prop, titulo)
View(simulacionESTR.prop)
View(simulacionESTR.prop)
titulo <- "Simulación: Muestreo estratificado (proporcional)"
graficaError(simulacionESTR.prop, titulo)
Tema <- theme(plot.title = (element_text(size = 20, color = "black")),
plot.subtitle = (element_text(size = 10, color = "black")),
legend.position = "top",  plot.margin = margin(0.5, 1, 0.5, 1, "cm"),
legend.key.height = unit (0.2, "cm"), legend.key.width = unit (0.2, "cm"),
axis.text = element_text(size = 10, color = "black"),
legend.text = element_text(size = 8, color = "black"),
legend.title = element_text(size = 10, color = "black"),
plot.caption = element_text(size = 10, color = "black", face="italic"),
axis.title = element_text(size = 12, color = "black"))
titulo <- "Simulación: Muestreo estratificado (proporcional)"
graficaError(simulacionESTR.prop, titulo)
View(simulacionESTR.prop)
View(simulacionESTR.prop)
#, echo = FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(readxl)
library(dplyr)
library(janitor)
library(kableExtra)
library(tidyverse)
library(extrafont)
library(scales)
library(showtext)
library(tint)
library(miniUI)
library(units)
library(ggfortify)
library(cowplot)
library(magrittr)
library("Cairo")
rm(list = ls())
`%notin%` = function(x,y) !(x %in% y)
source("funciones/muestra.R")
source("funciones/calculaECM.R")
#source("funciones/graficaHistograma.R")
source("funciones/graficaError.R")
source("funciones/funcionesSimulacion.R")
source("funciones/funcionSimulaEstrVar.R")
graficaHistograma <-function(df.simulacion, vtitulo){
M <- length(df.simulacion[,1])
comp <- ggplot(data=df.simulacion) +
geom_histogram(aes(x=estPRI, fill="PRI"),color="red",  alpha=0.5)+
geom_histogram(aes(x=estPAN, fill="PAN"), color="blue",  alpha=0.5)+
scale_fill_manual(breaks = c("PRI", "PAN"),
values=c("red", "blue")) +
theme_bw() + Tema +
labs(fill = "Partido", color= NULL, y = "", x = "% votación", title = vtitulo,
caption = NULL, subtitle = paste("Resultados de",M, "simulaciones"))
show(comp)
}
simulacionESTR.prop %>%
graficaHistograma("Simulación: Muestreo estratificado R/U")
gobernador2015<- read_excel("data/ComputoGobernador2015_Casilla.xlsx",
sheet = "POR CASILLA", skip = 1) %>%
clean_names()
UbicacionCasillas2015 <- read_excel("data/UbicacionCasillas2015.xlsx", skip = 4) %>%
clean_names()
casillas_sonora <- read.csv("data/casillas_sonora.csv")  %>%
select(seccion, casilla_tipo) %>%
distinct(seccion, casilla_tipo) %>%
rbind(c(608, "RURAL"))
casillas_sonora$seccion %<>% as.numeric()
gobernador2015 <- UbicacionCasillas2015 %>%
left_join(gobernador2015, ., by = c("seccion", "casilla")) %>%
select(-c(distrito_local.y, municipio.y, domicilio)) %>%
mutate(seccion_casilla = paste(seccion, casilla)) %>%
rename(municipio = municipio.x,
distrito_local = distrito_local.x)
gobernador2015 <- casillas_sonora %>%
left_join(gobernador2015, ., by = "seccion") %>%
mutate(distrito_tipo = paste(distrito_local,casilla_tipo))
rm(casillas_sonora)
gobernador2015 %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida)) -> resultadoReal
# Resultado global
resultadoReal <- resultadoReal * 100
resultadoReal
N <- length(gobernador2015$seccion_casilla)  # total de casillas
n <- muestra(N)                              # Número de secciones en la muestra
M <- 10                                    # Número de repeticiones
df.distritos <- gobernador2015 %>%
group_by(distrito_local) %>%
summarise(LN = sum(lista_nominal),
N.dist = n(),           # Casillas por distrito
p = LN/sum(gobernador2015$lista_nominal)) %>%   # Proporción
mutate(n.dist = round(num.casillas = n * p)) %>%
arrange(distrito_local)
df.distritos
simulacionESTR.prop <- funcionSimulaEstrVar(gobernador2015, n, M, df.distritos)
simulacionESTR.prop <- simulacionESTR.prop %>%
mutate(MinPRI = estPRI - (2.57 * varPRI),
MaxPRI = estPRI + (2.57 * varPRI),
MinPAN = estPAN - (2.57 * varPAN),
MaxPAN = estPAN + (2.57 * varPAN),
capturaPRI = estPRI > MinPRI
&& estPRI < MaxPRI,
capturaPAN = estPAN > MinPAN
&& estPAN < MaxPAN,
no.Traslape = MaxPAN < MinPRI,
longIntPRI = MaxPRI-MinPRI,
longIntPAN = MaxPAN-MinPAN)
captura_verdad <- data.frame()
captura_verdad <- captura_verdad %>%
rbind(simulacionESTR.prop %>%
select(capturaPRI, capturaPAN, no.Traslape) %>%
summarise(PRI.capturado = 100*length(capturaPRI[capturaPRI==TRUE]) / M,
PAN.capturado = 100*length(capturaPAN[capturaPAN==TRUE]) / M,
no.Traslapado = 100*length(no.Traslape[no.Traslape==TRUE])/M))
captura_verdad
Tema <- theme(plot.title = (element_text(size = 20, color = "black")),
plot.subtitle = (element_text(size = 10, color = "black")),
legend.position = "top",  plot.margin = margin(0.5, 1, 0.5, 1, "cm"),
legend.key.height = unit (0.2, "cm"), legend.key.width = unit (0.2, "cm"),
axis.text = element_text(size = 10, color = "black"),
legend.text = element_text(size = 8, color = "black"),
legend.title = element_text(size = 10, color = "black"),
plot.caption = element_text(size = 10, color = "black", face="italic"),
axis.title = element_text(size = 12, color = "black"))
titulo <- "Simulación: Muestreo estratificado (proporcional)"
graficaError(simulacionESTR.prop, titulo)
graficaHistograma <-function(df.simulacion, vtitulo){
M <- length(df.simulacion[,1])
comp <- ggplot(data=df.simulacion) +
geom_histogram(aes(x=estPRI, fill="PRI"),color="red",  alpha=0.5)+
geom_histogram(aes(x=estPAN, fill="PAN"), color="blue",  alpha=0.5)+
scale_fill_manual(breaks = c("PRI", "PAN"),
values=c("red", "blue")) +
theme_bw() + Tema +
labs(fill = "Partido", color= NULL, y = "", x = "% votación", title = vtitulo,
caption = NULL, subtitle = paste("Resultados de",M, "simulaciones"))
show(comp)
}
simulacionESTR.prop %>%
graficaHistograma("Simulación: Muestreo estratificado R/U")
View(simulacionESTR.prop)
View(simulacionESTR.prop)
#, echo = FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(readxl)
library(dplyr)
library(janitor)
library(kableExtra)
library(tidyverse)
library(extrafont)
library(scales)
library(showtext)
library(tint)
library(miniUI)
library(units)
library(ggfortify)
library(cowplot)
library(magrittr)
library("Cairo")
rm(list = ls())
`%notin%` = function(x,y) !(x %in% y)
source("funciones/muestra.R")
source("funciones/calculaECM.R")
#source("funciones/graficaHistograma.R")
#source("funciones/graficaError.R")
source("funciones/funcionesSimulacion.R")
source("funciones/funcionSimulaEstrVar.R")
simulacionESTR.prop %>%
graficaHistograma("Simulación: Muestreo estratificado proporcional")
#, echo = FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(readxl)
library(dplyr)
library(janitor)
library(kableExtra)
library(tidyverse)
library(extrafont)
library(scales)
library(showtext)
library(tint)
library(miniUI)
library(units)
library(ggfortify)
library(cowplot)
library(magrittr)
library("Cairo")
rm(list = ls())
`%notin%` = function(x,y) !(x %in% y)
source("funciones/muestra.R")
source("funciones/calculaECM.R")
#source("funciones/graficaHistograma.R")
#source("funciones/graficaError.R")
source("funciones/funcionesSimulacion.R")
source("funciones/funcionSimulaEstrVar.R")
gobernador2015<- read_excel("data/ComputoGobernador2015_Casilla.xlsx",
sheet = "POR CASILLA", skip = 1) %>%
clean_names()
UbicacionCasillas2015 <- read_excel("data/UbicacionCasillas2015.xlsx", skip = 4) %>%
clean_names()
casillas_sonora <- read.csv("data/casillas_sonora.csv")  %>%
select(seccion, casilla_tipo) %>%
distinct(seccion, casilla_tipo) %>%
rbind(c(608, "RURAL"))
casillas_sonora$seccion %<>% as.numeric()
gobernador2015 <- UbicacionCasillas2015 %>%
left_join(gobernador2015, ., by = c("seccion", "casilla")) %>%
select(-c(distrito_local.y, municipio.y, domicilio)) %>%
mutate(seccion_casilla = paste(seccion, casilla)) %>%
rename(municipio = municipio.x,
distrito_local = distrito_local.x)
gobernador2015 <- casillas_sonora %>%
left_join(gobernador2015, ., by = "seccion") %>%
mutate(distrito_tipo = paste(distrito_local,casilla_tipo))
rm(casillas_sonora)
gobernador2015 %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida)) -> resultadoReal
# Resultado global
resultadoReal <- resultadoReal * 100
resultadoReal
N <- length(gobernador2015$seccion_casilla)  # total de casillas
n <- muestra(N)                              # Número de secciones en la muestra
M <- 10                                    # Número de repeticiones
df.distritos <- gobernador2015 %>%
group_by(distrito_local) %>%
summarise(LN = sum(lista_nominal),
N.dist = n(),           # Casillas por distrito
p = LN/sum(gobernador2015$lista_nominal)) %>%   # Proporción
mutate(n.dist = round(num.casillas = n * p)) %>%
arrange(distrito_local)
df.distritos
simulacionESTR.prop <- funcionSimulaEstrVar(gobernador2015, n, M, df.distritos)
simulacionESTR.prop <- simulacionESTR.prop %>%
mutate(MinPRI = estPRI - (2.57 * varPRI),
MaxPRI = estPRI + (2.57 * varPRI),
MinPAN = estPAN - (2.57 * varPAN),
MaxPAN = estPAN + (2.57 * varPAN),
capturaPRI = estPRI > MinPRI
&& estPRI < MaxPRI,
capturaPAN = estPAN > MinPAN
&& estPAN < MaxPAN,
no.Traslape = MaxPAN < MinPRI,
longIntPRI = MaxPRI-MinPRI,
longIntPAN = MaxPAN-MinPAN)
captura_verdad <- data.frame()
captura_verdad <- captura_verdad %>%
rbind(simulacionESTR.prop %>%
select(capturaPRI, capturaPAN, no.Traslape) %>%
summarise(PRI.capturado = 100*length(capturaPRI[capturaPRI==TRUE]) / M,
PAN.capturado = 100*length(capturaPAN[capturaPAN==TRUE]) / M,
no.Traslapado = 100*length(no.Traslape[no.Traslape==TRUE])/M))
captura_verdad
Tema <- theme(plot.title = (element_text(size = 20, color = "black")),
plot.subtitle = (element_text(size = 10, color = "black")),
legend.position = "top",  plot.margin = margin(0.5, 1, 0.5, 1, "cm"),
legend.key.height = unit (0.2, "cm"), legend.key.width = unit (0.2, "cm"),
axis.text = element_text(size = 10, color = "black"),
legend.text = element_text(size = 8, color = "black"),
legend.title = element_text(size = 10, color = "black"),
plot.caption = element_text(size = 10, color = "black", face="italic"),
axis.title = element_text(size = 12, color = "black"))
graficaError <-function(df.simulacion, vtitulo){
M <- length(df.simulacion[,1])
error <- ggplot(data=df.simulacion, aes(x=dif.PRI^2)) +
geom_histogram(bins=50, color="red", fill = "red", alpha=0.5)+
scale_y_continuous(labels = comma) +
theme_bw() + Tema +
labs(fill = "Partido", color= NULL,
x = "Diferencia al cuadrado",
y = "Observaciones",
title = vtitulo,
caption = NULL,
subtitle = paste("Errores de", M, "simulaciones respecto al resultado observado"))
show(error)
}
titulo <- "Simulación: Muestreo estratificado (proporcional)"
graficaError(simulacionESTR.prop, titulo)
graficaHistograma <-function(df.simulacion, vtitulo){
M <- length(df.simulacion[,1])
comp <- ggplot(data=df.simulacion) +
geom_histogram(aes(x=estPRI, fill="PRI"),color="red",  alpha=0.5)+
geom_histogram(aes(x=estPAN, fill="PAN"), color="blue",  alpha=0.5)+
scale_fill_manual(breaks = c("PRI", "PAN"),
values=c("red", "blue")) +
theme_bw() + Tema +
labs(fill = "Partido", color= NULL, y = "", x = "% votación", title = vtitulo,
caption = NULL, subtitle = paste("Resultados de",M, "simulaciones"))
show(comp)
}
simulacionESTR.prop %>%
graficaHistograma("Simulación: Muestreo estratificado proporcional")
gobernador2015 %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida)) -> resultadoReal
resultadoReal
#, echo = FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(readxl)
library(dplyr)
library(janitor)
library(kableExtra)
library(tidyverse)
library(extrafont)
library(scales)
library(showtext)
library(tint)
library(miniUI)
library(units)
library(ggfortify)
library(cowplot)
library(magrittr)
library("Cairo")
rm(list = ls())
`%notin%` = function(x,y) !(x %in% y)
source("funciones/muestra.R")
source("funciones/calculaECM.R")
#source("funciones/graficaHistograma.R")
#source("funciones/graficaError.R")
source("funciones/funcionesSimulacion.R")
source("funciones/funcionSimulaEstrVar.R")
gobernador2015<- read_excel("data/ComputoGobernador2015_Casilla.xlsx",
sheet = "POR CASILLA", skip = 1) %>%
clean_names()
UbicacionCasillas2015 <- read_excel("data/UbicacionCasillas2015.xlsx", skip = 4) %>%
clean_names()
casillas_sonora <- read.csv("data/casillas_sonora.csv")  %>%
select(seccion, casilla_tipo) %>%
distinct(seccion, casilla_tipo) %>%
rbind(c(608, "RURAL"))
casillas_sonora$seccion %<>% as.numeric()
gobernador2015 <- UbicacionCasillas2015 %>%
left_join(gobernador2015, ., by = c("seccion", "casilla")) %>%
select(-c(distrito_local.y, municipio.y, domicilio)) %>%
mutate(seccion_casilla = paste(seccion, casilla)) %>%
rename(municipio = municipio.x,
distrito_local = distrito_local.x)
gobernador2015 <- casillas_sonora %>%
left_join(gobernador2015, ., by = "seccion") %>%
mutate(distrito_tipo = paste(distrito_local,casilla_tipo))
rm(casillas_sonora)
gobernador2015 %>%
summarise(PRI = sum(total_coalicion) / sum(votacion_total_emitida),
PAN = sum(pan) / sum(votacion_total_emitida)) -> resultadoReal
resultadoReal
N <- length(gobernador2015$seccion_casilla)  # total de casillas
n <- muestra(N)                              # Número de secciones en la muestra
M <- 10                                    # Número de repeticiones
df.distritos <- gobernador2015 %>%
group_by(distrito_local) %>%
summarise(LN = sum(lista_nominal),
N.dist = n(),           # Casillas por distrito
p = LN/sum(gobernador2015$lista_nominal)) %>%   # Proporción
mutate(n.dist = round(num.casillas = n * p)) %>%
arrange(distrito_local)
df.distritos
simulacionESTR.prop <- funcionSimulaEstrVar(gobernador2015, n, M, df.distritos)
simulacionESTR.prop <- simulacionESTR.prop %>%
mutate(MinPRI = estPRI - (2.57 * varPRI),
MaxPRI = estPRI + (2.57 * varPRI),
MinPAN = estPAN - (2.57 * varPAN),
MaxPAN = estPAN + (2.57 * varPAN),
capturaPRI = estPRI > MinPRI
&& estPRI < MaxPRI,
capturaPAN = estPAN > MinPAN
&& estPAN < MaxPAN,
no.Traslape = MaxPAN < MinPRI,
longIntPRI = MaxPRI-MinPRI,
longIntPAN = MaxPAN-MinPAN)
captura_verdad <- data.frame()
captura_verdad <- captura_verdad %>%
rbind(simulacionESTR.prop %>%
select(capturaPRI, capturaPAN, no.Traslape) %>%
summarise(PRI.capturado = 100*length(capturaPRI[capturaPRI==TRUE]) / M,
PAN.capturado = 100*length(capturaPAN[capturaPAN==TRUE]) / M,
no.Traslapado = 100*length(no.Traslape[no.Traslape==TRUE])/M))
captura_verdad
Tema <- theme(plot.title = (element_text(size = 20, color = "black")),
plot.subtitle = (element_text(size = 10, color = "black")),
legend.position = "top",  plot.margin = margin(0.5, 1, 0.5, 1, "cm"),
legend.key.height = unit (0.2, "cm"), legend.key.width = unit (0.2, "cm"),
axis.text = element_text(size = 10, color = "black"),
legend.text = element_text(size = 8, color = "black"),
legend.title = element_text(size = 10, color = "black"),
plot.caption = element_text(size = 10, color = "black", face="italic"),
axis.title = element_text(size = 12, color = "black"))
graficaError <-function(df.simulacion, vtitulo){
M <- length(df.simulacion[,1])
error <- ggplot(data=df.simulacion, aes(x=dif.PRI^2)) +
geom_histogram(bins=50, color="red", fill = "red", alpha=0.5)+
scale_y_continuous(labels = comma) +
theme_bw() + Tema +
labs(fill = "Partido", color= NULL,
x = "Diferencia al cuadrado",
y = "Observaciones",
title = vtitulo,
caption = NULL,
subtitle = paste("Errores de", M, "simulaciones respecto al resultado observado"))
show(error)
}
titulo <- "Simulación: Muestreo estratificado (proporcional)"
graficaError(simulacionESTR.prop, titulo)
graficaHistograma <-function(df.simulacion, vtitulo){
M <- length(df.simulacion[,1])
comp <- ggplot(data=df.simulacion) +
geom_histogram(aes(x=estPRI, fill="PRI"),color="red",  alpha=0.5)+
geom_histogram(aes(x=estPAN, fill="PAN"), color="blue",  alpha=0.5)+
scale_fill_manual(breaks = c("PRI", "PAN"),
values=c("red", "blue")) +
theme_bw() + Tema +
labs(fill = "Partido", color= NULL, y = "", x = "% votación", title = vtitulo,
caption = NULL, subtitle = paste("Resultados de",M, "simulaciones"))
show(comp)
}
simulacionESTR.prop %>%
graficaHistograma("Simulación: Muestreo estratificado proporcional")
View(simulacionESTR.prop)
View(simulacionESTR.prop)
